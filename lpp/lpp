#!/bin/sh
#
# lpp - LaTeX PreProcessor
#
# lpp < FILE.pretex > FILE.tex

# Global changes: (NOTE: Spaces behind expressions (not 1/2))
# \d		--> \mathrm{d}
# 1/2	 	--> \frac{1}{2} 
# \R		--> \mathbb{R}
# \C		--> \mathbb{C}
# \N		--> \mathbb{N}
# {...}		--> \begin{equation}...\end{equation} (vielleicht auch nicht)
# {		--> \begin{equation}
# {...		--> \begin{equation}\label{eq:...}	(dev-mode) 	
# }		--> \end{equation}
# |(		--> \left(
# )|		--> \right)
# \^T		--> ^{\mathrm{T}} (Matrix transpose)
# @... 		--> \Big|_{...}
# \intB[...] 	--> \int_{\mathcal{B}}...\mathrm{d}V
# \intB0[...] 	--> \int_{\mathcal{B_0}}...\mathrm{d}V
# \intdB[...] 	--> \int_{\mathcal{\partialB}}...\mathrm{d}A
# \konst	--> : \mathrm{konst}
# äöüÄÜÖß	--> \" ...
#  DGL		-->  Differentialgleichung
# --> 		--> \rightarrow
# ==> 		--> \Rightarrow
# <=> 		--> \Leftrightarrow
# vec\.. 	--> \boldsymbol{\..} 		(\vec does not work for symbols)
# tens\..	--> \boldsymbol{\..}
# \grad 	--> \mathrm{grad}
# \Grad		--> \textbf{grad}
# \div		--> \mathrm{div}
# \Div		--> \textbf{div}
# \rot		--> \textbf{rot}
# \tens		--> \mathbf{}
# \csh		--> \mathrm{csh}\,
# \sh		--> \mathrm{sh}\,
# \Re		--> \mathfrac{Re}
# \Im		--> \mathfrac{Im}
# [@]		--> \section{}
# [-]		--> \subsubsection{}
# [[^ ][^ ]*]	--> \cite{..}
# \eq{..}	--> (\ref{eq:..})
# $Id: lpp,v 1.11 2005/03/07 18:17:55 elmar Exp $	--> Id: ...
#
#
# Graphs:
# /^plot .*$/ will be piped throught $PLOT
#
# Tables:
# /^table{ ...	will be piped throught ltab
#
# PDO SYNTAX
#	\pd123{FUNK}:x:y (space) 
#		--> \frac{\partial^{123}}{\partial x \partial y} FUNK
#	\pd123FUNK:x:y:z (space)   
#		--> \frac{\partial^{123}FUNK}{\partial x\partial y}
#

PLOT="./scripts/plot"
echo "%File automatically generated by lpp - LaTeX PreProcessor Version 20030415"

#Table
#
#if [ ! -z "$label" ]; then
#	echo '\\begin{table}'
#	echo '\\begin{center}'
#fi
#
awk '
BEGIN { 
	FS="\t"; 
	first=1; 
	istab=0
	centertable=0
	titlestring=""
	format=""
}
!/^$/{	if (istab) {
		if (match($0,/^}/)) {
			first=1
			istab=0
			format=""
			print "\\end{tabular}"
			if (centertable) {
				print titlestring
				print "\\end{center}"
				print "\\end{table}"
			}
			centertable=0
			titlestring=""
		} else {
			if (first) {
				if (format=="")
				format="|"
				for (i=0; i<NF;i++)
					if ($(i+1)=="") {
						format=sprintf("%s%s",format,"|")
					} else {
						format=sprintf("%s%s",format,"c|")
					}
				printf ("\\begin{tabular}{%s}\n",format)
				print "\\hline"
			}
			first=0
			n=split($0,l)
			for (i=1; i<NF;i++)
				printf("%s & ",l[i])
			printf("%s \\\\\\hline\n",l[NF])
		}
	} else {
		if (match($0,/^table(\[.*\])*(\{.*\})*{/)) {
			istab=1
			if (match($0,/\{.*\}/)){
				centertable=1
				print "\\begin{table}"
				print "\\begin{center}"
				title=substr($0,RSTART+1,RLENGTH-2)
				if (match($0,/.*{/)){
					label=substr($0,RSTART+RLENGTH,length($0)-RSTART-RLENGTH+1)
					titlestring="\\caption{\\label{"label"}"title"}"
				} else {
					titlestring="\\caption{"title"}"
				}
			}
			if (match($0,/\[.*\]/)){
				format=substr($0,RSTART+1,RLENGTH-2)
			}
			#print
		} else {
			print
		}
	}
}
/^$/ {
	if (istab) {
		print "\\hline"
	} else {
		print
	}
}' |\
#if [ ! -z "$label" ]; then
#	echo '\end{center}'
#	echo "\\\caption{$label}"
#	echo '\end{table}'
#fi
#
# Seddies
# Global changes STDIN --> /tmp/lpp.temp0
sed -e 's/ä/\\"a/g
	s/Ä/\\"A/g
	s/ö/\\"o/g
	s/Ö/\\"O/g
	s/ü/\\"u/g
	s/Ü/\\"U/g
	s/ß/"s/g
	s/\\RE/\\mathfrak{Re}/g
	s/\\IM/\\mathfrak{Im}/g
	s/ vec\\\([^ ]*\) /\\boldsymbol \\\1 /g
	s/ tens\\\([^ ]*\) /\\boldsymbol \\\1 /g
	s/-->/\\rightarrow/g
	s/==>/\\Rightarrow/g
	s/<=>/\\Leftrightarrow/g
	s/ DGL/ Differentialgleichung/g
	s/\\konst/:\\mathrm{konst}/g
	s/^{\(.*\)}$/\\begin{equation}\1\\end{equation}/
	s/^{$/\\begin{equation}/
	s/^{\([^ ]*\)$/\\begin{equation}\\label{eq:\1}/
	s/^{\([^ ]*\)$/\[\1\]\\begin{equation}\\label{eq:\1}/
	s/^}$/\\end{equation}/
	s/\\d /\\mathrm{d} /g
	s/\\C /\\mathbb{C} /g
	s/\\R /\\mathbb{R} /g
	s/\\N /\\mathbb{N} /g
	s/1\/2/\\frac{1}{2}/g
	s/\\tens /\\mathbf /g
	s/\\csh /\\mathrm{csh}\\, /g
	s/\\sh /\\mathrm{sh}\\, /g
        s/\\tens{/\\mathbf{/g
	s/\\grad /\\,\\mathrm{grad}\\,/g
	s/\\Grad /\\,\\mathbf{grad}\\,/g
	s/\\div /\\,\\mathrm{div}\\,/g
	s/\\Div /\\,\\mathbf{div}\\,/g
	s/\\Rot /\\,\\mathbf{rot}\\,/g
	s/\\rot /\\,\\mathrm{rot}\\,/g
	s/|(/\\left(/g
	s/)|/\\right)/g
#	s/\@\([^@]*\)\@/\\Big|_{\1} /g
	s/\\intB\[\([^]]*\)\]/\\int_{\\mathcal{B}} \1 \\,\\mathrm{d}V/g
	s/\\intB0\[\([^]]*\)\]/\\int_{\\mathcal{B}_0} \1 \\,\\mathrm{d}V_0/g
	s/\\intdB\[\([^]]*\)\]/\\int_{\\partial\\mathcal{B}} \1 \\,\\mathrm{d}A/g
	s/\\^T/^{\\mathrm{T}}/g
	s/^\[@\] \(.*\)/\\section{\1}/
	s/^\[-\] \(.*\)/\\subsubsection{\1}/
	s/\[\([^ ][^ ]*\)\]/\\cite{\1}/g
	s/\\eq{\([^}]*\)}/(\\mbox{\\ref{eq:\1}})/g
	s/\$\(Id[^$]*\)\$/\1/
	
#
# Vectors, mathfrac; Matrices bold
	s/\\vec \(.\)/\\mathfrak{\1}/g
	s/\\vec{\([^}]*\)}/\\mathfrak{\1}/g
        s/\\mat /\\mathbf /g
        s/\\mat{/\\mathbf{/g' |\
# Partial Differential Operators
sed -e 's/\\pd\([0-9]*\){\([^}]*\)}:\([^ ]*\) / >PDO \\frac{\\partial^{\1}}{:\3} {\2} PDO< /g
        s/\\pd\([0-9]*\)\([^:]*\):\([^ ]*\) / >PDO \\frac{\\partial^{\1}{\2}}{:\3} PDO< /g' |\
awk '{
	if (match ($0,/>PDO/)) {
		fields = split ($0, line, /(>PDO )|( PDO<)/)
		outop = 1;
		for (i=1; i<fields; i++) {
			if (outop) {
				printf("%s", line[i])
				outop = 0
			} else {
				gsub (/:/, "\\partial ", line[i])
			printf("%s", line[i])
			outop = 1
			}
		}
		printf ("%s\n",line[fields])
	} else { print }
}' |\
sed -e 's/\\Pd\([0-9]*\){\([^}]*\)}:\([^ ]*\) / >PdO \\partial^{\1}\/:\3 {\2} PdO< /g
        s/\\Pd\([0-9]*\)\([^:]*\):\([^ ]*\) / >PdO \\partial^{\1}{\2}\/:\3 PdO< /g' |\
awk '{
	if (match ($0,/>PdO/)) {
		fields = split ($0, line, /(>PdO )|( PdO<)/)
		outop = 1;
		for (i=1; i<fields; i++) {
			if (outop) {
				printf("%s", line[i])
				outop = 0
			} else {
				gsub (/:/, "\\partial ", line[i])
			printf("%s", line[i])
			outop = 1
			}
		}
		printf ("%s\n",line[fields])
	} else { print }
}' | sed -e 's/partial^{}/\partial/g' |\
# Plot command
awk '{ 
	if (match ($0,/^plot/)) { 
		sub(/plot/,"'$PLOT'")
		system($0) 
	}
	else print
}'

